#!/bin/bash
true

if $(return >/dev/null 2>&1); then
	# script was sourced, run it as bash instead
	"${BASH_SOURCE[0]}" "$@"
	return "$?"
fi

# configuration
LINES=(user_at_host user_at_host_line distro:Distro uptime:Uptime shell:Shell desktop:Desktop memory:Memory empty palette)
COLORS=1
NERD_FONTS=3 # 0 = disabled, 1 = before key, 2 = after key, 3 = before value, 4 = after value
COLOR_KEY=$'\x1b[38;5;15m'
COLOR_SEPARATOR=$'\x1b[38;5;7m'
COLOR_AT=$'\x1b[38;5;6m'
COLOR_VALUE=$'\x1b[38;5;14m'
COLOR_NERD=$'\x1b[38;5;14m'
COLOR_LINE=$'\x1b[38;5;7m'
COLOR_RESET=$'\x1b[0m'
PALETTE_CHARACTER=$'\x1b[38;5;%im󱓻\x1b[0m '
LINE="-"
AT="@"
SEPARATOR=": "
ALIGN_SEPARATORS=0
NERD_FONTS_DISTRO=("Linux Mint:󰣭 " "Kali Linux: " "Alpine Linux: " "Arch Linux: " "Artix Linux: " "Debian*: " "Devuan: " "Gentoo Linux: " "Fedora Linux: " "CentOS: " "elementary OS*: " "EndeavourOS: " "Manjaro Linux: " "NixOS: " "openSUSE*: " "Solus: " "Ubuntu: " "Void Linux: " "Zorin OS: ")
NERD_FONTS_DESKTOP=() #TODO

# stuff for printing
unset current_username
unset current_shell
unset current_hostname
unset current_os_id
unset current_os_name
unset current_os_pretty_name
KEY_LINES=()
VALUE_LINES=()
SEPARATOR_LINES=()
PAD_LINES=()
MAX_PADDING=0

# clear colors if colors were disabled
if [[ "$COLORS" != "1" ]]; then
	COLOR_KEY=
	COLOR_SEPARATOR=
	COLOR_AT=
	COLOR_VALUE=
	COLOR_NERD=
	COLOR_LINE=
	COLOR_RESET=
fi

# repeats a string until it reaches a length
function repeat_pattern(){
	local str=""
	local j i
	for (( i=0, j=0; i<"$2"; i++, j++ )); do
		[[ "$j" -ge "${#1}" ]] && j=0
		printf "%s" "${1:$j:1}"
	done
}

# adds a piece of information to the output
function info(){
	KEY_LINES+=("${5-"$COLOR_KEY"}$1${COLOR_RESET}")
	VALUE_LINES+=("${7-"$COLOR_VALUE"}$2${COLOR_RESET}")

	# separator
	local s="${3-"$SEPARATOR"}"
	# if the value is blank, we don't need a separator
	if [[ -z "$2" ]]; then s=""
	# if the key is blank, make enough spaces so it still lines up
	elif [[ -z "$1" ]]; then s="$(printf "%*s" "${#SEPARATOR}" "")"; fi
	SEPARATOR_LINES+=("${6-"$COLOR_SEPARATOR"}${s}${COLOR_RESET}")

	info_pad "$@"
}

# above but draws it as a line instead
function info_line(){
	KEY_LINES+=("$COLOR_LINE$(repeat_pattern "$LINE" "${#1}")")
	VALUE_LINES+=("$COLOR_LINE$(repeat_pattern "$LINE" "${#2}")")

	# separator
	if [[ -z "$2" ]]; then
		# if the value is blank, we don't need a separator
		SEPARATOR_LINES+=()
	elif [[ -z "$1" ]]; then
		# if the key is blank, make enough spaces so it still lines up
		SEPARATOR_LINES+=("$(printf "%*s" "${#SEPARATOR}" "")")
	else
		# if both the key and the value aren't blank, set the separator to lines
		local s="${3-"$SEPARATOR"}"
		SEPARATOR_LINES+=("${8-"$COLOR_LINE"}$(repeat_pattern "$LINE" "${#s}")${COLOR_RESET}")
	fi

	info_pad "$@"
}

# calculate how many spaces to pad left so the separators line up
function info_pad(){
	if [[ -z "$4" ]]; then
		if [[ "$ALIGN_SEPARATORS" == "1" ]]; then
			[[ "${#1}" -gt "$MAX_PADDING" ]] && MAX_PADDING="${#1}"
		fi
	fi
	KEY_LEN_LINES+=("${#1}")
	PAD_LINES+=("$4")
}

# print all lines
function print(){
	IFS=' '
	local i padding
	for ((i=0; i<"${#KEY_LINES[@]}"; i++)); do
		padding="$(("${MAX_PADDING}"-"${KEY_LEN_LINES[$i]}"))" # set padding to max length of keys subtracted by the length of this key
		[[ -n "${PAD_LINES[$i]}" ]] && padding="${PAD_LINES[$i]}" # if custom padding is set, use that instead
		[[ "$padding" -lt 0 ]] && padding=0 # prevent negative values
		printf "%*s%s%s%s\n" "$padding" "" "${KEY_LINES[$i]}" "${SEPARATOR_LINES[$i]}" "${VALUE_LINES[$i]}"
	done
}

# parse /etc/os-release
function parse_os_release(){
	[[ -n "$current_os_id" && -n "$current_os_name" && -n "$current_os_pretty_name" ]] && return 0
	unset release_ID release_NAME release_PRETTY_NAME
	local key val
	while IFS='=' read -r key val; do
		[[ "$key" == '"'*'"' || "$key" == "'"*"'" ]] && key="${key:1:-1}"
		[[ "$val" == '"'*'"' || "$val" == "'"*"'" ]] && val="${val:1:-1}"
		local "release_$key"="$val"
	done < /etc/os-release || return 1
	current_os_id="$release_ID"
	current_os_name="$release_NAME"
	current_os_pretty_name="$release_PRETTY_NAME"
}

# get if string matches in nerd font array
function nerd_match(){
	local match icon
	IFS=":" read -r match icon <<< "$2"
	if [[ "$match" == *"*" && "$1" == "${match%"*"}"* ]] || \
		[[ "$match" == "*"* && "$1" == *"${match#"*"}" ]] || \
		[[ "$1" == "$match" ]]; then
		printf "%s" "$icon"
		return 0
	fi
	return 1
}

# gets distro from /etc/os-release
function line_distro(){
	parse_os_release
	local name=""
	[[ -n "$current_os_id" ]] && name="$current_os_id"
	[[ -n "$current_os_name" ]] && name="$current_os_name"
	[[ -n "$current_os_pretty_name" ]] && name="$current_os_pretty_name"

	# nerd fonts
	if [[ "$NERD_FONTS" != "0" ]]; then
		local i match
		for i in "${NERD_FONTS_DISTRO[@]}"; do
			match="$(nerd_match "$current_os_id" "$i" || nerd_match "$current_os_name" "$i" || nerd_match "$current_os_pretty_name" "$i")"
			if [[ -n "$match" ]]; then
				case "$NERD_FONTS" in
					1)
						"$1" "${match}$2" "$name"
						;;
					2)
						"$1" "$2 $match" "$name"
						;;
					3)
						"$1" "$2" "$match$name"
						;;
					4)
						"$1" "$2" "$name $match"
						;;
					*)
						echo e
						break
				esac
				return 0
			fi
		done
	fi

	"$1" "$2" "$name"
}

# gets user information
function get_user(){
	local line username _passwd uid _gid _desc _homedir shell
	[[ -n "$current_username" && -n "$current_shell" ]] && return 0
	while IFS=$'\n' read -r line; do
		# read line in passwd
		IFS=':' read -r username _passwd uid _gid _desc _homedir shell <<< "$line" || continue
		if [[ "$uid" == "$UID" ]]; then
			current_username="$username"
			current_shell="$shell"
			return 0
		fi
	done < /etc/passwd
	return 1
}

# formats seconds into human readable, e.g 3281938 becomes 5w 2d 23h 38m 58s
function format_duration(){
	local t
	t="$(printf "%.0f" "$1")"
	local w="$((t/604800))"
	t="$((t%604800))"
	local d="$((t/86400))"
	t="$((t%86400))"
	local h="$((t/3600))"
	t="$((t%3600))"
	local m="$((t/60))"
	local s="$((t%60))"
	local str="${s}s"
	[[ "$m" -gt 0 ]] && str="${m}m $str"
	[[ "$h" -gt 0 ]] && str="${h}h $str"
	[[ "$d" -gt 0 ]] && str="${d}d $str"
	[[ "$w" -gt 0 ]] && str="${w}w $str"
	printf "%s" "$str"
}

# formats bytes into human readable, e.g 5368709120 becomes 5G
function format_bytes(){
	local bytes="$((100*$1))"
	local bytes_dec=""
	local prefix_index=0
	local prefix=(" bytes" "K" "M" "G" "T" "P" "E" "Z" "Y")
	if [[ "$bytes" -lt 100 ]]; then
		printf "%s" "0.$bytes${prefix[0]}"
		return 0
	fi
	while [[ "$bytes" -ge 102400 ]]; do
		bytes="$((bytes/1024))"
		prefix_index="$((prefix_index+1))"
	done
	for (( i=0; i<2; i++ )); do
		bytes_dec="${bytes:0-1}$bytes_dec"
		bytes="${bytes::-1}"
	done
	[[ "$prefix_index" == 0 ]] && bytes_dec=""
	while [[ "${bytes_dec:0-1}" == "0" ]]; do bytes_dec="${bytes_dec::-1}"; done
	[[ "${#bytes_dec}" -gt 0 ]] && bytes_dec=".$bytes_dec"
	printf "%s" "${bytes}${bytes_dec}${prefix["$prefix_index"]}"
}

# gets system hostname
function get_hostname(){
	[[ -n "$current_hostname" ]] && return 0
	current_hostname="${HOSTNAME:-"$(</proc/sys/kernel/hostname)"}"
}

# gets memory used and total
function line_memory(){
	line_memory_ "$1" "$2"
}
function line_memory_percent(){
	line_memory_ "$1" "$2" "1"
}
function line_memory_(){
	[[ -n "$current_memory_total" && -n "$current_memory_free" && -n "$current_memory_available" && -n "$current_swap_total" && -n "$current_swap_free" && -n "$current_swap_cached" ]] && return 0
	local key val num dec i percent percent_dec mem_total mem_available mem_used
	mem_not_used=0
	while IFS=':' read -r key val; do
		num="$(("${val//[^0-9\.-]/}" * 1024))"
		case "$key" in
			MemTotal)
				mem_total="$(("${val//[^0-9]/}"*1024))"
				mem_used="$((mem_used + num))" ;;
			Shmem)
				mem_used="$((mem_used + num))" ;;
			MemFree|Buffers|Cached|SReclaimable)
				mem_used="$((mem_used - num))" ;;
			MemAvailable)
				mem_available="$(("${val//[^0-9]/}"*1024))" ;;
			*)
				;;
		esac
	done < /proc/meminfo || return 1
	dec=1
	percent="$((mem_used * (10 ** (2 + dec)) / mem_total))"
	percent_dec=""
	while [[ "${#percent}" -lt "$((dec + 10))" ]]; do percent="0$percent"; done
	for (( i=0; i<"$dec"; i++ )); do
		percent_dec="${percent:0-1}$percent_dec"
		percent="${percent::-1}"
	done
	while [[ "${percent_dec:0-1}" == "0" ]]; do percent_dec="${percent_dec::-1}"; done
	while [[ "${percent::1}" == "0" ]]; do percent="${percent:1}"; done
	[[ "${#percent_dec}" -gt 0 ]] && percent_dec=".$percent_dec"
	if [[ "$3" == "1" ]]; then
		"$1" "$2" "$percent$percent_dec%"
	else
		"$1" "$2" "$(format_bytes "$mem_used") / $(format_bytes "$mem_total")"
	fi
}

# gets username
function line_user(){
	get_user
	"$1" "$2" "$current_username"
}

# gets hostname
function line_host(){
	get_hostname
	"$1" "$2" "$current_hostname"
}

# gets system uptime
function line_uptime(){
	local uptime
	IFS=' ' read -r uptime _ < /proc/uptime
	"$1" "$2" "$(format_duration "$uptime")"
}

# gets the username with hostname
function line_user_at_host(){
	get_user
	get_hostname
	"$1" "$current_username" "$current_hostname" "$AT" 0 "$COLOR_VALUE" "$COLOR_AT" "$COLOR_VALUE"
}

# alternative to basename
function base() {
	local dir
    dir="${1%"${1##*[!/]}"}"
    dir="${dir##*/}"
    dir="${dir%"$2"}"
    printf '%s\n' "${dir:-/}"
}

# gets the user's shell
function line_shell(){
	get_user
	"$1" "$2" "$(base "${current_shell}")"
}

# gets the desktop environment or window manager
function line_desktop(){
	local de
	if [[ -n "$GNOME_DESKTOP_SESSION_ID" ]]; then
		de=GNOME
	elif [[ -n "$MATE_DESKTOP_SESSION_ID" ]]; then
		de=MATE
	elif [[ -n "$TDE_FULL_SESSION" ]]; then
		de=Trinity
	else
		de="${XDG_CURRENT_DESKTOP:-"$DESKTOP_SESSION"}"
		[[ "$de" == "mate" ]] && de=MATE
		[[ "$de" == *xfce* ]] && de=Xfce
		[[ "$de" == *KDE_SESSION* ]] && de=KDE
	fi
	"$1" "$2" "$de"
}

# draw color palette
function line_palette(){
	local i
	for i in 0 1; do
		local s=""
		for j in 0 1 2 3 4 5 6 7; do
			s="$s$(printf "$PALETTE_CHARACTER" "$((i*8+j))")"
		done
		"$1" "$s" "" "" 0
	done
}

# parse LINES array
function main(){
	local line
	for line in "${LINES[@]}"; do
		if [[ "$line" == "empty" ]]; then
			info ""
		else
			local info_func=info
			local name="$line"
			if [[ "$line" == "line_"* ]]; then
				local number
				IFS="_" read -r _ number <<< "$line"
				if [[ "$number" -eq "$number" ]]; then
					info_line "$(printf "%*s" "$number")"
					continue
				fi
			elif [[ "$line" == *"_line" ]]; then
				line="${line%_line}"
				info_func=info_line
			elif [[ "$line" == *":"* ]]; then
				IFS=":" read -r line name <<< "$line"
			fi

			line="line_$line"

			if [[ "$(type -t "$line")" == function ]]; then
				"$line" "$info_func" "$name"
			else
				echo "Unknown info line: $line"
			fi
		fi
	done
	print
}

main

